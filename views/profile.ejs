<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Tonewoo - โปรไฟล์</title>
    <link rel="stylesheet" href="/css/styles.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css">
</head>

<body>
    <nav class="navbar">
        <div class="container">
            <div class="logo">
                <a href="/">Tonewoo</a>
            </div>
            <ul class="nav-links">
                
                <li id="nav-thread"><a href="#" data-bs-toggle="modal" data-bs-target="#createPostModal">ตั้งกระทู้</a>
                </li>
                <li id="user-info">
                    <!-- Will be populated by JavaScript -->
                </li>
                <li id="nav-logout"><a href="#" onclick="logout()">ออกจากระบบ</a></li>
            </ul>
        </div>
    </nav>

    <main class="container my-5">
        <div class="row">
            <div class="col-md-8 mx-auto">
                <div class="card shadow">
                    <div class="card-body" id="profile-content">
                        <!-- Profile content will be populated by JavaScript -->
                        <div class="text-center">
                            <p>Loading profile...</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </main>

    <div class="container my-5">
        <div class="card shadow mb-4">
            <div class="card-header bg-primary text-white">
                <h3 class="mb-0">My Posts</h3>
            </div>
            <div class="card-body">
                <div class="table-responsive">
                    <table class="table table-striped table-hover">
                        <thead class="table-dark">
                            <tr>
                                <th scope="col">Title</th>
                                <th scope="col">Content</th>
                                <th scope="col">Date</th>
                                <th scope="col">Actions</th>
                            </tr>
                        </thead>
                        <tbody id="posts-table-body">
                            <!-- Posts will be dynamically inserted -->
                        </tbody>
                    </table>
                </div>
            </div>
        </div>

        <div class="card shadow">
            <div class="card-header bg-success text-white">
                <h3 class="mb-0">My Comments</h3>
            </div>
            <div class="card-body">
                <div class="table-responsive">
                    <table class="table table-striped table-hover">
                        <thead class="table-dark">
                            <tr>
                                <th scope="col">Post</th>
                                <th scope="col">Comment</th>
                                <th scope="col">Date</th>
                                <th scope="col">Actions</th>
                            </tr>
                        </thead>
                        <tbody id="comments-table-body">
                            <!-- Comments will be dynamically inserted -->
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>

    <div class="modal fade" id="editPostModal" tabindex="-1" aria-labelledby="editPostModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="editPostModalLabel">แก้ไขกระทู้</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="editPostForm">
                        <div class="mb-3">
                            <label for="editPostTitle" class="form-label">หัวข้อกระทู้</label>
                            <input type="text" class="form-control" id="editPostTitle" required>
                        </div>
                        <div class="mb-3">
                            <label for="editPostContent" class="form-label">เนื้อหากระทู้</label>
                            <textarea class="form-control" id="editPostContent" rows="5" required></textarea>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">ภาพที่มีอยู่</label>
                            <div id="existingImages" class="d-flex flex-wrap gap-2">
                                <!-- Existing images will be dynamically inserted -->
                            </div>
                        </div>
                        <div class="mb-3">
                            <label for="newPostImages" class="form-label">เพิ่มภาพใหม่</label>
                            <input type="file" class="form-control" id="newPostImages" multiple>
                        </div>
                        <div class="mb-3">
                            <label for="editPostCategories" class="form-label">หมวดหมู่</label>
                            <div id="editPostCategories" class="d-flex flex-wrap gap-2">
                                <!-- Categories will be dynamically loaded as checkboxes -->
                            </div>
                        </div>
                        <input type="hidden" id="editPostId">
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">ยกเลิก</button>
                            <button type="submit" class="btn btn-primary">บันทึกการเปลี่ยนแปลง</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>


    <!-- Modal for Editing Comment -->
    <div class="modal fade" id="editCommentModal" tabindex="-1" aria-labelledby="editCommentModalLabel"
        aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <form id="editCommentForm">
                    <div class="modal-header">
                        <h5 class="modal-title" id="editCommentModalLabel">Edit Comment</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <div class="mb-3">
                            <label for="editCommentContent" class="form-label">Comment</label>
                            <textarea class="form-control" id="editCommentContent" rows="4" required></textarea>
                        </div>
                        <input type="hidden" id="editCommentId">
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                        <button type="submit" class="btn btn-primary">Save Changes</button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <!-- Modal สำหรับตั้งกระทู้ -->
    <div class="modal fade" id="createPostModal" tabindex="-1" aria-labelledby="createPostModalLabel"
        aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="createPostModalLabel">ตั้งกระทู้</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="createPostForm">
                        <div class="mb-3">
                            <label for="postTitle" class="form-label">หัวข้อกระทู้</label>
                            <input type="text" class="form-control" id="postTitle" required>
                        </div>
                        <div class="mb-3">
                            <label for="postContent" class="form-label">เนื้อหากระทู้</label>
                            <textarea class="form-control" id="postContent" rows="5" required></textarea>
                        </div>
                        <div class="mb-3">
                            <label for="postImages" class="form-label">อัปโหลดภาพ (ถ้ามี)</label>
                            <input type="file" class="form-control" id="postImages" multiple>
                        </div>
                        <div class="mb-3">
                            <label for="postCategories" class="form-label">หมวดหมู่</label>
                            <div id="postCategories">
                            </div>
                        </div>
                        <button type="submit" class="btn btn-primary">สร้างกระทู้</button>
                    </form>
                </div>
            </div>
        </div>
    </div>


    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', async function () {
            const token = localStorage.getItem('token');
            if (!token) {
                window.location.href = '/';
                return;
            }

            try {
                // Fetch user profile data
                const response = await fetch('/user/api/profile', {
                    headers: {
                        'Authorization': `Bearer ${token}`
                    }
                });

                if (!response.ok) {
                    throw new Error('Failed to fetch profile');
                }

                const data = await response.json();
                const user = data.user;

                // Update profile content
                document.getElementById('profile-content').innerHTML = `
                    <div class="text-center mb-4">
                        <div class="rounded-circle bg-secondary text-white mx-auto mb-3 d-flex align-items-center justify-content-center" 
                             style="width: 150px; height: 150px; font-size: 64px;">
                            ${user.username.charAt(0).toUpperCase()}
                        </div>
                        <h2 class="card-title">${user.username}</h2>
                        <p class="text-muted">
                            อีเมล: ${user.email}<br>
                            สมาชิกตั้งแต่: ${new Date(user.createdAt).toLocaleDateString('th-TH', {
                    year: 'numeric',
                    month: 'long',
                    day: 'numeric'
                })}
                        </p>
                    </div>
                `;

                // Update user info in navbar
                document.getElementById('user-info').innerHTML = `
                    <a href="/user/profile">${user.username}</a>
                `;

                // // Fetch and populate categories
                // const categoriesResponse = await fetch('/api/categories');
                // const categories = await categoriesResponse.json();
                // const categoriesMenu = document.getElementById('categories-menu');
                // categoriesMenu.innerHTML = categories.map(category =>
                //     `<li><a href="/category/${category.name}">${category.name}</a></li>`
                // ).join('');

            } catch (error) {
                console.error('Error:', error);
                document.getElementById('profile-content').innerHTML = `
                    <div class="text-center">
                        <p class="text-danger">Failed to load profile. Please try again later.</p>
                    </div>
                `;
            }
        });

        async function loadPostsAndComments() {
            try {
                const response = await fetch('/user/api/posts-comments', {
                    headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` }
                });

                if (!response.ok) throw new Error('Failed to load posts and comments');

                const { posts, comments } = await response.json();

                const postsTableBody = document.getElementById('posts-table-body');
                const commentsTableBody = document.getElementById('comments-table-body');

                postsTableBody.innerHTML = posts.map(post => `
                <tr>
                    <td>${post.title}</td>
                    <td>${post.content}</td>
                    <td>${new Date(post.createdAt).toLocaleDateString()}</td>
                    <td>
                        <button class="btn btn-primary btn-sm" onclick="editPost('${post._id}')"><i class="bi bi-pencil"></i></button>
                        <button class="btn btn-danger btn-sm" onclick="deletePost('${post._id}')"><i class="bi bi-trash"></i></button>
                    </td>
                </tr>
            `).join('');

                commentsTableBody.innerHTML = comments.map(comment => `
                <tr>
                    <td>${comment.post.title}</td>
                    <td>${comment.content}</td>
                    <td>${new Date(comment.createdAt).toLocaleDateString()}</td>
                    <td>
                        <button class="btn btn-primary btn-sm" onclick="editComment('${comment._id}')"><i class="bi bi-pencil"></i></button>
                        <button class="btn btn-danger btn-sm" onclick="deleteComment('${comment._id}')"><i class="bi bi-trash"></i></button>
                    </td>
                </tr>
            `).join('');
            } catch (error) {
                console.error('Error loading posts/comments:', error);
            }
        }

        async function editPost(id) {
            try {
                const response = await fetch(`/user/api/posts/${id}`, {
                    headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` }
                });

                if (!response.ok) throw new Error('Failed to fetch post data');
                const post = await response.json();

                // Populate the modal fields
                document.getElementById('editPostTitle').value = post.title;
                document.getElementById('editPostContent').value = post.content;
                document.getElementById('editPostId').value = post._id;

                // Populate existing images
                const existingImagesContainer = document.getElementById('existingImages');
                existingImagesContainer.innerHTML = post.images
                    .map(image => `
        <div class="position-relative">
            <img src="../${image}" alt="Post Image" class="img-thumbnail" style="width: 100px; height: 100px;">
            <button type="button" class="btn btn-danger btn-sm position-absolute top-0 end-0" onclick="deleteImage('${image}')">×</button>
        </div>
    `).join('');

                // Populate categories as checkboxes
                const categoriesResponse = await fetch('/api/categories');
                const categories = await categoriesResponse.json();

                const categoriesContainer = document.getElementById('editPostCategories');
                categoriesContainer.innerHTML = categories.map(category => `
            <div class="form-check">
                <input 
                    class="form-check-input" 
                    type="checkbox" 
                    id="category-${category._id}" 
                    value="${category._id}" 
                    ${post.categories.includes(category._id) ? 'checked' : ''}>
                <label class="form-check-label" for="category-${category._id}">
                    ${category.name}
                </label>
            </div>
        `).join('');

                // Show the modal
                new bootstrap.Modal(document.getElementById('editPostModal')).show();
            } catch (error) {
                console.error('Error fetching post:', error);
            }
        }


        async function deletePost(id) {
            try {
                const response = await fetch(`/user/api/posts/${id}`, {
                    method: 'DELETE',
                    headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` }
                });

                if (!response.ok) {
                    throw new Error('Failed to delete post');
                }

                // Reload posts and comments after deletion
                await loadPostsAndComments();
                alert('Post deleted successfully');
            } catch (error) {
                console.error('Error deleting post:', error);
                alert('Failed to delete post');
            }
        }

        async function editComment(id) {
            try {
                const response = await fetch(`/user/api/comments/${id}`, {
                    headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` }
                });
                if (!response.ok) throw new Error('Failed to fetch comment data');
                const comment = await response.json();

                // Populate the modal form
                document.getElementById('editCommentContent').value = comment.content;
                document.getElementById('editCommentId').value = comment._id;

                // Show the modal
                new bootstrap.Modal(document.getElementById('editCommentModal')).show();
            } catch (error) {
                console.error('Error fetching comment:', error);
            }
        }

        async function deleteImage(imageFilename) {
            try {
                // Send a request to delete the image from the backend
                const postId = document.getElementById('editPostId').value;
                const response = await fetch(`/user/api/posts/${postId}/images/${imageFilename}`, {
                    method: 'DELETE',
                    headers: {
                        'Authorization': `Bearer ${localStorage.getItem('token')}`
                    }
                });

                if (!response.ok) throw new Error('Failed to delete image');

                // Remove image from the UI
                const container = document.querySelector(`img[src="../${imageFilename}"]`).parentNode;
                container.remove();

                console.log('Deleted image:', imageFilename);
            } catch (error) {
                console.error('Error deleting image:', error);
                alert('Failed to delete image');
            }
        }

        // Handle form submission for post
        document.getElementById('editPostForm').addEventListener('submit', async (event) => {
            event.preventDefault();
            const id = document.getElementById('editPostId').value;
            const title = document.getElementById('editPostTitle').value;
            const content = document.getElementById('editPostContent').value;

            // Collect selected categories
            const selectedCategories = Array.from(document.querySelectorAll('#editPostCategories .form-check-input:checked'))
                .map(checkbox => checkbox.value);

            const formData = new FormData();
            formData.append('title', title);
            formData.append('content', content);
            formData.append('categories', JSON.stringify(selectedCategories));

            const newImages = document.getElementById('newPostImages').files;
            for (const file of newImages) {
                formData.append('newImages', file);
            }

            try {
                const response = await fetch(`/user/api/posts/${id}`, {
                    method: 'PUT',
                    headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` },
                    body: formData
                });

                if (!response.ok) throw new Error('Failed to update post');
                alert('Post updated successfully');
                loadPostsAndComments(); // Reload posts and comments
                bootstrap.Modal.getInstance(document.getElementById('editPostModal')).hide();
            } catch (error) {
                console.error('Error updating post:', error);
                alert('Failed to update post');
            }
        });

        // Handle form submission for comment
        document.getElementById('editCommentForm').addEventListener('submit', async (event) => {
            event.preventDefault();
            const id = document.getElementById('editCommentId').value;
            const content = document.getElementById('editCommentContent').value;

            try {
                const response = await fetch(`/user/api/comments/${id}`, {
                    method: 'PUT',
                    headers: {
                        'Authorization': `Bearer ${localStorage.getItem('token')}`,
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ content })
                });

                if (!response.ok) throw new Error('Failed to update comment');
                alert('Comment updated successfully');
                loadPostsAndComments(); // Reload data
                bootstrap.Modal.getInstance(document.getElementById('editCommentModal')).hide();
            } catch (error) {
                console.error('Error updating comment:', error);
                alert('Failed to update comment');
            }
        });

        async function deleteComment(id) {
            try {
                const response = await fetch(`/user/api/comments/${id}`, {
                    method: 'DELETE',
                    headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` }
                });

                if (!response.ok) {
                    throw new Error('Failed to delete comment');
                }

                // Reload posts and comments after deletion
                await loadPostsAndComments();
                alert('Comment deleted successfully');
            } catch (error) {
                console.error('Error deleting comment:', error);
                alert('Failed to delete comment');
            }
        }

        // ส่งข้อมูลการตั้งกระทู้ไปยังเซิร์ฟเวอร์
        document.getElementById("createPostForm").addEventListener("submit", async function (event) {
            event.preventDefault();

            const formData = new FormData();
            formData.append("title", document.getElementById("postTitle").value);
            formData.append("content", document.getElementById("postContent").value);

            // แก้ไขการจัดการ categories
            const selectedCategories = Array.from(document.querySelectorAll("#postCategories input:checked"))
                .map(input => input.value);
            // ส่ง categories เป็น JSON string
            formData.append("categories", JSON.stringify(selectedCategories));

            // แก้ไขการจัดการ files
            const imageFiles = document.getElementById("postImages").files;
            for (let i = 0; i < imageFiles.length; i++) {
                formData.append("images", imageFiles[i]);
            }

            const token = localStorage.getItem("token");

            try {
                const response = await fetch("/api/posts", {
                    method: "POST",
                    headers: {
                        "Authorization": `Bearer ${token}`
                    },
                    body: formData
                });

                const result = await response.json();
                if (result.success) {
                    alert("สร้างกระทู้สำเร็จ!");
                    location.reload();
                } else {
                    alert("เกิดข้อผิดพลาด: " + (result.error || "ไม่สามารถสร้างกระทู้ได้"));
                }
            } catch (error) {
                console.error("Error:", error);
                alert("เกิดข้อผิดพลาดในการส่งข้อมูล");
            }
        });

        async function loadCategories() {
            try {
                const response = await fetch('/api/categories');
                const categories = await response.json();

                const categoriesContainer = document.getElementById("postCategories");
                categories.forEach(category => {
                    const checkbox = document.createElement("input");
                    checkbox.type = "checkbox";
                    checkbox.id = `category_${category._id}`;
                    checkbox.value = category._id;

                    const label = document.createElement("label");
                    label.setAttribute("for", checkbox.id);
                    label.textContent = category.name;

                    const div = document.createElement("div");
                    div.classList.add("form-check");
                    div.appendChild(checkbox);
                    div.appendChild(label);

                    categoriesContainer.appendChild(div);
                });
            } catch (error) {
                console.error("Error loading categories:", error);
            }
        }

        document.addEventListener('DOMContentLoaded', loadCategories);


        document.addEventListener('DOMContentLoaded', loadPostsAndComments);

        function logout() {
            localStorage.removeItem("token");
            localStorage.removeItem("user");
            window.location.href = '/';
        }
    </script>
</body>

</html>